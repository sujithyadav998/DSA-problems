/**
 * Definition for a binary tree node.
 * struct TreeNode {
 *     int val;
 *     TreeNode *left;
 *     TreeNode *right;
 *     TreeNode() : val(0), left(nullptr), right(nullptr) {}
 *     TreeNode(int x) : val(x), left(nullptr), right(nullptr) {}
 *     TreeNode(int x, TreeNode *left, TreeNode *right) : val(x), left(left), right(right) {}
 * };
 */
class Solution {
public:
    TreeNode * search(TreeNode * root,int start)
    {
        if(root == NULL)
        {
            return NULL ; 
        }
        if(root->val == start)
        {
            return root ; 
        }
        TreeNode * r = search(root->left , start) ;
        TreeNode * l = search(root->right , start) ;
        if(r != NULL)
        {
            return r ; 
        }
        if(l != NULL)
        {
            return l  ; 
        }
        return NULL ; 
    }
    int amountOfTime(TreeNode* root, int start) {

        TreeNode * node = search(root , start) ;

        //creating a parent  map 
        queue <TreeNode * > q  ; 
        unordered_map < TreeNode * , TreeNode *  > parent ; 
        q.push(root) ;
        parent[root] = root  ; 
        while(!q.empty())
         {
             int sz = q.size() ; 
             for(int i = 0 ; i < sz ; i++)
             {
                 TreeNode * f = q.front()  ;
               
                
                 q.pop() ;
                 if(f->left)
                 {
                     q.push(f->left) ;
                     parent[f->left] = f ; 
                 }
                 if(f->right)
                 {
                     q.push(f->right )  ;
                     parent[f->right] = f ; 
                 }
                 
                 
             }
         }
      

         //visiting node
          unordered_map < TreeNode * , int > vis ;
          
           queue < TreeNode * > Q ; 
           int t = 0 ; 
           Q.push(node) ;
           vis[node] = 1 ; 
           while(!Q.empty())
           {
             int sz = Q.size() ; 
             for(int i = 0 ; i < sz ; i++)
             {
                    TreeNode * f = Q.front() ;
                    Q.pop() ; 
                    if(f->left &&  vis.count(f->left) == 0)
                    {
                        vis[f->left] = 1 ; 
                        Q.push(f->left) ;
                    }
                    if(f->right &&  vis.count(f->right) == 0)
                    {
                        vis[f->right] = 1; 
                        Q.push(f->right) ;
                    }
                    if( vis.count(parent[f])== 0)
                    {
                        vis[parent[f]] = 1; 
                         Q.push(parent[f]) ;
                    }
                 
                 
             }
               

               t++ ; 
           }



    return t  - 1; 

        
    }
};
