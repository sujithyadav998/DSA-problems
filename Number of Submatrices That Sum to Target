class Solution {
public:
    int subarraySum(vector<int>& nums, int k) {


        int c = 0 ; 
        unordered_map <int , int> m ; 
        m[0] = 1  ; 
        int s = 0; 
        for(int i = 0 ; i < nums.size() ; i++)
        {
            s = s + nums[i] ; 
            int v = s -  k ; 
             if(m.count(v) > 0)
             {
                  c = c + m[v] ;
             }  
             m[s]++ ;   
        }
        return c ; 
        
    }
    int numSubmatrixSumTarget(vector<vector<int>>& matrix, int target) {
        int n = matrix.size() ; 
        int m = matrix[0].size() ; 

        
        int c = 0 ; 

        for(int i = 0 ; i < n ; i++)
        {
            vector <int> x(m , 0) ; 
            for(int j = i ;  j < n ; j++)
            {
                  for(int k = 0 ; k < m ; k++)
                  {
                      x[k] = x[k] + matrix[j][k] ; 
                      
                      
                  }
                  c  = c + subarraySum(x , target) ;
            }
        }
        return c ; 

        
        
    }
};
