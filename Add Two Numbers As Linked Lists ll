#include <bits/stdc++.h> 
/************************************************************

    Following is the linked list node structure:
    
    template <typename T>
    class Node {
        public:
        T data;
        Node* next;

        Node(T data) {
            next = NULL;
            this->data = data;
        }
    };

************************************************************/
Node <int> * reverselist(Node <int> * head)
{
    Node <int> * temp = head ; 
    Node <int> * prev = NULL ; 
    while(temp != NULL)
    {
       Node  <int> * t = temp->next ; 
       temp->next = prev ;
       prev = temp ; 
       temp = t ;  

    }
    return prev  ; 
}
Node<int>* addTwoLists(Node<int>* first, Node<int>* second) {
    // Write your code here.
    Node <int> * ftail = reverselist(first) ; 
    Node <int> * stail = reverselist(second) ;
    Node <int> * head = NULL ; 
    Node <int> * tail = NULL ; 
    int carry = 0 ; 
    while(ftail != NULL && stail != NULL)
    {
        int s = ftail->data + stail->data + carry ; 
        if(s >= 10)
        {
           carry = 1 ; 
           Node  <int>  * n = new Node <int>(s - 10) ; 
           if(head == NULL)
           {
               head = n ; 
               tail = n ; 
           }
           else
           {
               tail->next = n ; 
               tail = tail->next ; 
           }

        }
        else
        {
           carry = 0 ; 
           Node  <int>  * n = new Node <int>(s) ; 
           if(head == NULL)
           {
               head = n ; 
               tail = n ; 
           }
           else
           {
               tail->next = n ; 
               tail = tail->next ; 
           }

        }
        ftail = ftail->next ; 
        stail = stail->next ; 

    }
    while(ftail != NULL)
    {
         int s = ftail->data + carry ; 
        if(s >= 10)
        {
           carry = 1 ; 
           Node  <int>  * n = new Node <int>(s - 10) ; 
           if(head == NULL)
           {
               head = n ; 
               tail = n ; 
           }
           else
           {
               tail->next = n ; 
               tail = tail->next ; 
           }

        }
        else
        {
           carry = 0 ; 
           Node  <int>  * n = new Node <int>(s) ; 
           if(head == NULL)
           {
               head = n ; 
               tail = n ; 
           }
           else
           {
               tail->next = n ; 
               tail = tail->next ; 
           }

        }
        ftail = ftail->next ; 
            
    }

    while(stail != NULL)
    {
         int s =  stail->data + carry ; 
        if(s >= 10)
        {
           carry = 1 ; 
           Node  <int>  * n = new Node <int>(s - 10) ; 
           if(head == NULL)
           {
               head = n ; 
               tail = n ; 
           }
           else
           {
               tail->next = n ; 
               tail = tail->next ; 
           }

        }
        else
        {
           carry = 0 ; 
           Node  <int>  * n = new Node <int>(s) ; 
           if(head == NULL)
           {
               head = n ; 
               tail = n ; 
           }
           else
           {
               tail->next = n ; 
               tail = tail->next ; 
           }

        }
        stail = stail->next ; 
    }
    if(carry == 1)
    { 
         Node  <int>  * n = new Node <int>(1) ; 
         tail->next = n ; 
         tail = tail->next ; 

    }
    Node <int> * ans = reverselist(head);
    return ans  ; 


}
