 int find(int a , int k)
    {
        int r = 0 ; 
        while(k != 0 )
        {
            
            r = a % 2 ; 
            a = a/ 2 ;
            k--;
            
        }
        return r ; 
    }
    long long int count(vector <int> &a1 , vector <int> &a2 , int i , int j , int m , int n , int k ,   vector < vector <pair <int, int>  > > &values ,   vector < vector <pair <int, int>  > >&values2 )
    {
        long long int az1, ao1 , az2 , ao2 ; 
        
        if(i == 0)
        {
            az1 = values[j][k].first; 
            ao1 = values[j][k].second ; 
              
            
        }
        else
        {
             az1 = values[j][k].first - values[i - 1][k].first; 
             ao1 = values[j][k].second - values[i - 1][k].second; 
             
        }
        
        
        if(m == 0)
        {
            az2 = values2[n][k].first ;  
             ao2 = values2[n][k].second ; 
        }
        else
        {
            az2 = values2[n][k].first - values2[m - 1][k].first;  
             ao2 = values2[n][k].second- values2[m - 1][k].second ; 
        }
      //cout << az1 << " " << ao1 << " " << az2 << " " << ao2 << endl ; 

       return az1 * ao2 + az2 * ao1 ; 
       // cout << az1 << " " << ao1 << " " << az2 << " " << ao2 << endl ; 
       
    }
    vector<long long int> xorPairs(int N, vector<int> &A1, vector<int> &A2, int Q, vector<vector<int>> &query) {
        vector < vector <pair <int, int>  >  >values(N + 1 , vector <pair <int,int> >(31 , {0,0}));
        
        
        
        
        for(int i = 0; i <  N ; i++)
        {
            int a = A1[i] ;
            int r = 0 ; 
            int k = 30 ; 
            while(k != 0 )
            {
                
                r = a % 2 ; 
                if(r == 0)
                {
                    if(i == 0)
                    {
                        values[i][30 - k + 1].first =  1 ; 
                        values[i][30 - k + 1].second = 0 ; 
                    }
                    else
                    {
                    values[i][30 - k + 1].first = values[i - 1][30 - k + 1].first + 1 ; 
                    values[i][30 - k + 1].second = values[i - 1][30 - k + 1].second  ; 
                    }
                }
                else
                {
                    
                    if(i == 0)
                    {
                        values[i][30 - k + 1].first =  0 ; 
                        values[i][30 - k + 1].second = 1 ; 
                    }
                    else
                    {
                    values[i][30 - k + 1].second = values[i - 1][30 - k + 1].second + 1 ;
                    values[i][30 - k + 1].first = values[i - 1][30 - k + 1].first ; 
                    }
                }
              
                a = a/ 2 ;
                k--;
                
            }
        }
        
    //   for(int i = 0 ; i < N ; i++)
    //          cout << values[i][2].first << " " << values[i][2].second << endl ;


        
        vector < vector <pair <int, int>  >  >values2(N + 1 , vector <pair <int,int> >(31 , {0,0}));

        for(int i = 0; i <  N ; i++)
        {
            int a = A2[i] ;
            int r = 0 ; 
            int k = 30 ; 
            
            while(k != 0 )
            {
                
                r = a % 2 ; 
                if(r == 0)
                {
                    if(i == 0)
                    {
                        values2[i][30 - k + 1].first =  1 ; 
                        values2[i][30 - k + 1].second = 0 ; 
                    }
                    else
                    {
                    values2[i][30 - k + 1].first = values2[i - 1][30 - k + 1].first + 1 ; 
                    values2[i][30 - k + 1].second = values2[i - 1][30 - k + 1].second  ; 
                    }
                }
                else
                {
                    if(i == 0)
                    {
                         values2[i][30 - k + 1].first =  0; 
                        values2[i][30 - k + 1].second =  1; 
                    
                    }
                    else
                    {
                    values2[i][30 - k + 1].second = values2[i - 1][30 - k + 1].second + 1 ;
                    values2[i][30 - k + 1].first = values2[i - 1][30 - k + 1].first ; 
                    }
                    
                }
              
                a = a/ 2 ;
                k--;
                
            }
        }
        
        //   cout << "hey" << endl ; 
        //   for(int i = 0 ; i < N ; i++)
        //      cout << values2[i][2].first << " " << values2[i][2].second << endl ;

         vector <long long int> ans ; 
        for(int i = 0 ; i < query.size() ; i++)
        {
           long long int c =  count(A1,A2 , query[i][1] - 1 , query[i][2] - 1,query[i][3] - 1 , query[i][4] - 1, query[i][0], values , values2);
           ans.push_back(c) ; 
        }
        
        return ans ; 
      
    }
