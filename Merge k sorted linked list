class Solution {
public:

     ListNode * merge(ListNode * head1 , ListNode * head2)
     {
         ListNode * head = NULL ; 
         ListNode * tail = NULL ; 
         while(head1 != NULL && head2 != NULL)
         {
             if(head1->val  < head2->val)
             {
                 if(head == NULL)
                 {
                     head = head1 ; 
                     tail = head1 ; 
                 }
                 else
                 {
                     tail->next = head1 ; 
                     tail = tail->next ; 

                 }
                   head1 = head1->next ;
             }
           
             else
             {
              if(head == NULL)
                 {
                     head = head2 ; 
                     tail = head2 ; 
                 }
                 else
                 {
                     tail->next = head2 ; 
                       tail = tail->next ; 

                 }
                 head2 = head2->next;
            }

             
        }

             if(head1 != NULL)
             {
                 tail->next = head1 ;
             }
             else if(head2 != NULL)
             {
                 tail->next = head2 ; 
             }
        
        return head  ; 
     }
    ListNode* mergeKLists(vector<ListNode*>& lists) {
        if(lists.size() == 0)
        {
            return NULL; 
        }
       
      
        ListNode * a = NULL ;
        for(int i = 0; i < lists.size() ; i++)
        {
              if(lists[i] == NULL)
              {
                  continue ; 
              }
              if(a == NULL)
              {
                  a = lists[i] ;
              }
              else
              {
              a = merge(a, lists[i]) ; 
              }

        }
        return a ; 
        
    }
};
