vector<int> spiralOrder(BinaryTreeNode<int> *root)
{
	// Write Your Code Here.
    vector <int> ans ; 
    if(root == NULL)
    return ans ; 
    deque <BinaryTreeNode<int> *> dq ; 
    dq.push_back(root) ;
    int d = 0 ; 
    while(!dq.empty())
    {
        int sz = dq.size() ; 
        for(int i = 0 ; i < sz ; i++)
        {

            if(d == 1)
            {
              BinaryTreeNode<int> * f = dq.back() ; 
               dq.pop_back() ; 
               if(f->right)
               {
                    dq.push_front(f->right) ;
               } 
                if(f->left)
               {
                    dq.push_front(f->left) ;
               } 
               ans.push_back(f->data) ;
            }
            if(d == 0)
            {
                  BinaryTreeNode<int> * f = dq.front() ; 
                   dq.pop_front() ; 
               
                if(f->left)
                {
                    dq.push_back(f->left) ;
                } 
                 
               if(f->right)
               {
                    dq.push_back(f->right) ;
               } 
               ans.push_back(f->data) ;
            }
            
         
        }
        d = (d + 1)%2 ; 
    }
    return ans ; 
}
